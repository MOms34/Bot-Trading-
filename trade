#!/usr/bin/env python3

import math

class TradeAction:
    def __init__(self, action, source_currency, destination_currency, quantity):
        self.action = action
        self.source_currency = source_currency
        self.destination_currency = destination_currency
        self.quantity = quantity
    
    def __str__(self):
        return f"{self.action} {self.source_currency}_{self.destination_currency} {self.quantity}"

class Currency:
    def __init__(self, name):
        self.name = name
        self.date = []
        self.high = []
        self.low = []
        self.open = []
        self.close = []
        self.volume = []

def create_trade_action(action, source_currency, destination_currency, quantity):
    return TradeAction(action, source_currency, destination_currency, quantity)

def parse_settings(settings, input_text):
    settings[input_text[1]] = input_text[2]
    return settings

def parse_update(input_text, update):
    values = input_text[3].split(";")
    for value in values:
        currency_data = value.split(',')
        currency = currency_data[0]
        if currency not in update:
            update[currency] = Currency(currency)
        update[currency].date.append(float(currency_data[1]))
        update[currency].high.append(float(currency_data[2]))
        update[currency].low.append(float(currency_data[3]))
        update[currency].open.append(float(currency_data[4]))
        update[currency].close.append(float(currency_data[5]))
        update[currency].volume.append(float(currency_data[6]))
    return update

def calculate_standard_deviation(data):
    mean = sum(data) / len(data)
    deviations = [(value - mean) ** 2 for value in data]
    variance = sum(deviations) / len(deviations)
    standard_deviation = math.sqrt(variance)
    return round(standard_deviation, 2)

def calculate_bollinger_bands(period):
    average = sum(period) / len(period)
    standard_deviation = calculate_standard_deviation(period)
    lower_band = average - 2 * standard_deviation
    upper_band = average + 2 * standard_deviation
    if period[-1] < lower_band:
        return -1
    elif period[-1] >= upper_band:
        return 1
    return 0

def calculate_macd(input_array):
    first_average = sum(input_array[:12]) / len(input_array[:12])
    second_average = sum(input_array[-26:]) / len(input_array[-26:])
    macd = first_average - second_average
    if macd < -0.25:
        return -1
    elif macd > 0.25:
        return 1
    return 0

def calculate_momentum(input_array):
    momentum = input_array[-1] - input_array[-10]
    last_value = input_array[-11]
    differences = [abs(value - last_value) for value in input_array[:-10]]
    average_difference = sum(differences) / len(differences)
    if momentum < 0 and abs(momentum) > average_difference * 1.5:
        return -1
    elif momentum > 0 and abs(momentum) > average_difference * 1.5:
        return 1
    return 0

def parse_currency_stocks(txt):
    stocks = {}
    currency_list = txt.split(',')
    for currency in currency_list:
        currency_data = currency.split(':')
        stocks[currency_data[0]] = float(currency_data[1])
    return stocks

def make_currency_trade(currpair, update, bank):
    action = None
    money = 0
    currencies = currpair.split('_')
    macd = calculate_macd(update[currpair].close)
    bollinger_bands = calculate_bollinger_bands(update[currpair].close[-12:])
    momentum = calculate_momentum(update[currpair].close)
    current_price = update[currpair].close[-1]
    
    # Condition pour l'achat
    if macd == 1 or bollinger_bands == 1 or momentum == 1:
        if macd != bollinger_bands or bollinger_bands != momentum or macd != momentum:
            money = bank[currencies[0]] / 2 / current_price
        else:
            money = bank[currencies[0]] / 4 / current_price
        if money <= bank[currencies[0]] and round(money, 5) > 0:
            action = create_trade_action("buy", currencies[0], currencies[1], money)
    
    # Condition pour la vente
    elif macd == -1 and bollinger_bands == -1 and momentum == -1:
        purchased_currency = currencies[0] if bank[currencies[0]] > 0 else currencies[1]
        purchased_amount = bank[purchased_currency]
        if purchased_amount > 0:
            profit = purchased_amount * (current_price - update[currpair].open[-1])
            
            # Si le profit est inférieur à 0, attendre pour vendre lors d'une hausse ultérieure
            if profit < 0:
                return None
            
            # Vendre rapidement lors d'une forte baisse
            elif profit > 0 and current_price < update[currpair].low[-1]:
                action = create_trade_action("sell", currencies[0], currencies[1], purchased_amount)
    
    return action

def main():
    settings = {}
    update = {}
    bank = {}
    
    while True:
        input_text = input().split()
        if not input_text:
            break
        if input_text[0] == "settings":
            settings = parse_settings(settings, input_text)
        elif input_text[0] == "update":
            if input_text[2] == "next_candles":
                update = parse_update(input_text, update)
            elif input_text[2] == "stacks":
                bank = parse_currency_stocks(input_text[3])
        elif input_text[0] == "action":
            actions = [make_currency_trade(currpair, update, bank) for currpair in update]
            valid_actions = [str(action) for action in actions if action is not None]
            if valid_actions:
                print(';'.join(valid_actions))
            else:
                print("pass")

if __name__ == "__main__":
    main()
